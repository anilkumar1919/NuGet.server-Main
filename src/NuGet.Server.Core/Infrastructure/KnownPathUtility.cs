// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.IO;

namespace NuGet.Server.Core.Infrastructure
{
    public static class KnownPathUtility
    {
        /// <summary>
        /// Determines if a relative file path could have been generated by <see cref="ExpandedPackageRepository"/>.
        /// The path is assumed to be relative to the base of the package directory.
        /// </summary>
        /// <param name="path">The file path to parse.</param>
        /// <param name="id">The package ID found.</param>
        /// <param name="version">The package version found.</param>
        /// <returns>True if the file name is known.</returns>
        public static bool TryParseFileName(string path, out string id, out SemanticVersion version)
        {
            id = null;
            version = null;

            if (path == null || Path.IsPathRooted(path))
            {
                return false;
            }

            var pathPieces = path.Split(Path.DirectorySeparatorChar);
            if (pathPieces.Length != 3) // {id}\{version}\{file name}
            {
                return false;
            }

            id = pathPieces[pathPieces.Length - 3];
            var unparsedVersion = pathPieces[pathPieces.Length - 2];
            var fileName = pathPieces[pathPieces.Length - 1];

            if (!SemanticVersion.TryParse(unparsedVersion, out version)
                || version.ToNormalizedString() != unparsedVersion)
            {
                return false;
            }

            string expectedFileName;
            if (fileName.EndsWith(NuGet.Constants.PackageExtension))
            {
                expectedFileName = $"{id}.{version}{NuGet.Constants.PackageExtension}";
            }
            else if (fileName.EndsWith(NuGet.Constants.HashFileExtension))
            {
                expectedFileName = $"{id}.{version}{NuGet.Constants.HashFileExtension}";
            }
            else if (fileName.EndsWith(NuGet.Constants.ManifestExtension))
            {
                expectedFileName = $"{id}{NuGet.Constants.ManifestExtension}";
            }
            else
            {
                return false;
            }

            return expectedFileName == fileName;
        }
    }
}
